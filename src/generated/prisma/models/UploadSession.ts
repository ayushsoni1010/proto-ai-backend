
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UploadSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UploadSession
 * 
 */
export type UploadSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$UploadSessionPayload>

export type AggregateUploadSession = {
  _count: UploadSessionCountAggregateOutputType | null
  _avg: UploadSessionAvgAggregateOutputType | null
  _sum: UploadSessionSumAggregateOutputType | null
  _min: UploadSessionMinAggregateOutputType | null
  _max: UploadSessionMaxAggregateOutputType | null
}

export type UploadSessionAvgAggregateOutputType = {
  totalChunks: number | null
  uploadedChunks: number | null
}

export type UploadSessionSumAggregateOutputType = {
  totalChunks: number | null
  uploadedChunks: number | null
}

export type UploadSessionMinAggregateOutputType = {
  id: string | null
  filename: string | null
  totalChunks: number | null
  uploadedChunks: number | null
  status: $Enums.UploadStatus | null
  s3Key: string | null
  createdAt: Date | null
  updatedAt: Date | null
  expiresAt: Date | null
}

export type UploadSessionMaxAggregateOutputType = {
  id: string | null
  filename: string | null
  totalChunks: number | null
  uploadedChunks: number | null
  status: $Enums.UploadStatus | null
  s3Key: string | null
  createdAt: Date | null
  updatedAt: Date | null
  expiresAt: Date | null
}

export type UploadSessionCountAggregateOutputType = {
  id: number
  filename: number
  totalChunks: number
  uploadedChunks: number
  status: number
  s3Key: number
  createdAt: number
  updatedAt: number
  expiresAt: number
  _all: number
}


export type UploadSessionAvgAggregateInputType = {
  totalChunks?: true
  uploadedChunks?: true
}

export type UploadSessionSumAggregateInputType = {
  totalChunks?: true
  uploadedChunks?: true
}

export type UploadSessionMinAggregateInputType = {
  id?: true
  filename?: true
  totalChunks?: true
  uploadedChunks?: true
  status?: true
  s3Key?: true
  createdAt?: true
  updatedAt?: true
  expiresAt?: true
}

export type UploadSessionMaxAggregateInputType = {
  id?: true
  filename?: true
  totalChunks?: true
  uploadedChunks?: true
  status?: true
  s3Key?: true
  createdAt?: true
  updatedAt?: true
  expiresAt?: true
}

export type UploadSessionCountAggregateInputType = {
  id?: true
  filename?: true
  totalChunks?: true
  uploadedChunks?: true
  status?: true
  s3Key?: true
  createdAt?: true
  updatedAt?: true
  expiresAt?: true
  _all?: true
}

export type UploadSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UploadSession to aggregate.
   */
  where?: Prisma.UploadSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UploadSessions to fetch.
   */
  orderBy?: Prisma.UploadSessionOrderByWithRelationInput | Prisma.UploadSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UploadSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UploadSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UploadSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UploadSessions
  **/
  _count?: true | UploadSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UploadSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UploadSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UploadSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UploadSessionMaxAggregateInputType
}

export type GetUploadSessionAggregateType<T extends UploadSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateUploadSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUploadSession[P]>
    : Prisma.GetScalarType<T[P], AggregateUploadSession[P]>
}




export type UploadSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UploadSessionWhereInput
  orderBy?: Prisma.UploadSessionOrderByWithAggregationInput | Prisma.UploadSessionOrderByWithAggregationInput[]
  by: Prisma.UploadSessionScalarFieldEnum[] | Prisma.UploadSessionScalarFieldEnum
  having?: Prisma.UploadSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UploadSessionCountAggregateInputType | true
  _avg?: UploadSessionAvgAggregateInputType
  _sum?: UploadSessionSumAggregateInputType
  _min?: UploadSessionMinAggregateInputType
  _max?: UploadSessionMaxAggregateInputType
}

export type UploadSessionGroupByOutputType = {
  id: string
  filename: string
  totalChunks: number
  uploadedChunks: number
  status: $Enums.UploadStatus
  s3Key: string | null
  createdAt: Date
  updatedAt: Date
  expiresAt: Date
  _count: UploadSessionCountAggregateOutputType | null
  _avg: UploadSessionAvgAggregateOutputType | null
  _sum: UploadSessionSumAggregateOutputType | null
  _min: UploadSessionMinAggregateOutputType | null
  _max: UploadSessionMaxAggregateOutputType | null
}

type GetUploadSessionGroupByPayload<T extends UploadSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UploadSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UploadSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UploadSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UploadSessionGroupByOutputType[P]>
      }
    >
  >



export type UploadSessionWhereInput = {
  AND?: Prisma.UploadSessionWhereInput | Prisma.UploadSessionWhereInput[]
  OR?: Prisma.UploadSessionWhereInput[]
  NOT?: Prisma.UploadSessionWhereInput | Prisma.UploadSessionWhereInput[]
  id?: Prisma.StringFilter<"UploadSession"> | string
  filename?: Prisma.StringFilter<"UploadSession"> | string
  totalChunks?: Prisma.IntFilter<"UploadSession"> | number
  uploadedChunks?: Prisma.IntFilter<"UploadSession"> | number
  status?: Prisma.EnumUploadStatusFilter<"UploadSession"> | $Enums.UploadStatus
  s3Key?: Prisma.StringNullableFilter<"UploadSession"> | string | null
  createdAt?: Prisma.DateTimeFilter<"UploadSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UploadSession"> | Date | string
  expiresAt?: Prisma.DateTimeFilter<"UploadSession"> | Date | string
}

export type UploadSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  totalChunks?: Prisma.SortOrder
  uploadedChunks?: Prisma.SortOrder
  status?: Prisma.SortOrder
  s3Key?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type UploadSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  s3Key?: string
  AND?: Prisma.UploadSessionWhereInput | Prisma.UploadSessionWhereInput[]
  OR?: Prisma.UploadSessionWhereInput[]
  NOT?: Prisma.UploadSessionWhereInput | Prisma.UploadSessionWhereInput[]
  filename?: Prisma.StringFilter<"UploadSession"> | string
  totalChunks?: Prisma.IntFilter<"UploadSession"> | number
  uploadedChunks?: Prisma.IntFilter<"UploadSession"> | number
  status?: Prisma.EnumUploadStatusFilter<"UploadSession"> | $Enums.UploadStatus
  createdAt?: Prisma.DateTimeFilter<"UploadSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UploadSession"> | Date | string
  expiresAt?: Prisma.DateTimeFilter<"UploadSession"> | Date | string
}, "id" | "s3Key">

export type UploadSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  totalChunks?: Prisma.SortOrder
  uploadedChunks?: Prisma.SortOrder
  status?: Prisma.SortOrder
  s3Key?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  _count?: Prisma.UploadSessionCountOrderByAggregateInput
  _avg?: Prisma.UploadSessionAvgOrderByAggregateInput
  _max?: Prisma.UploadSessionMaxOrderByAggregateInput
  _min?: Prisma.UploadSessionMinOrderByAggregateInput
  _sum?: Prisma.UploadSessionSumOrderByAggregateInput
}

export type UploadSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.UploadSessionScalarWhereWithAggregatesInput | Prisma.UploadSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.UploadSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UploadSessionScalarWhereWithAggregatesInput | Prisma.UploadSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UploadSession"> | string
  filename?: Prisma.StringWithAggregatesFilter<"UploadSession"> | string
  totalChunks?: Prisma.IntWithAggregatesFilter<"UploadSession"> | number
  uploadedChunks?: Prisma.IntWithAggregatesFilter<"UploadSession"> | number
  status?: Prisma.EnumUploadStatusWithAggregatesFilter<"UploadSession"> | $Enums.UploadStatus
  s3Key?: Prisma.StringNullableWithAggregatesFilter<"UploadSession"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UploadSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UploadSession"> | Date | string
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"UploadSession"> | Date | string
}

export type UploadSessionCreateInput = {
  id?: string
  filename: string
  totalChunks: number
  uploadedChunks?: number
  status?: $Enums.UploadStatus
  s3Key?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt: Date | string
}

export type UploadSessionUncheckedCreateInput = {
  id?: string
  filename: string
  totalChunks: number
  uploadedChunks?: number
  status?: $Enums.UploadStatus
  s3Key?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt: Date | string
}

export type UploadSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  totalChunks?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedChunks?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  s3Key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UploadSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  totalChunks?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedChunks?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  s3Key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UploadSessionCreateManyInput = {
  id?: string
  filename: string
  totalChunks: number
  uploadedChunks?: number
  status?: $Enums.UploadStatus
  s3Key?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  expiresAt: Date | string
}

export type UploadSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  totalChunks?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedChunks?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  s3Key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UploadSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  totalChunks?: Prisma.IntFieldUpdateOperationsInput | number
  uploadedChunks?: Prisma.IntFieldUpdateOperationsInput | number
  status?: Prisma.EnumUploadStatusFieldUpdateOperationsInput | $Enums.UploadStatus
  s3Key?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UploadSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  totalChunks?: Prisma.SortOrder
  uploadedChunks?: Prisma.SortOrder
  status?: Prisma.SortOrder
  s3Key?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type UploadSessionAvgOrderByAggregateInput = {
  totalChunks?: Prisma.SortOrder
  uploadedChunks?: Prisma.SortOrder
}

export type UploadSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  totalChunks?: Prisma.SortOrder
  uploadedChunks?: Prisma.SortOrder
  status?: Prisma.SortOrder
  s3Key?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type UploadSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  totalChunks?: Prisma.SortOrder
  uploadedChunks?: Prisma.SortOrder
  status?: Prisma.SortOrder
  s3Key?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type UploadSessionSumOrderByAggregateInput = {
  totalChunks?: Prisma.SortOrder
  uploadedChunks?: Prisma.SortOrder
}

export type EnumUploadStatusFieldUpdateOperationsInput = {
  set?: $Enums.UploadStatus
}



export type UploadSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  filename?: boolean
  totalChunks?: boolean
  uploadedChunks?: boolean
  status?: boolean
  s3Key?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
}, ExtArgs["result"]["uploadSession"]>

export type UploadSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  filename?: boolean
  totalChunks?: boolean
  uploadedChunks?: boolean
  status?: boolean
  s3Key?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
}, ExtArgs["result"]["uploadSession"]>

export type UploadSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  filename?: boolean
  totalChunks?: boolean
  uploadedChunks?: boolean
  status?: boolean
  s3Key?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
}, ExtArgs["result"]["uploadSession"]>

export type UploadSessionSelectScalar = {
  id?: boolean
  filename?: boolean
  totalChunks?: boolean
  uploadedChunks?: boolean
  status?: boolean
  s3Key?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  expiresAt?: boolean
}

export type UploadSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "filename" | "totalChunks" | "uploadedChunks" | "status" | "s3Key" | "createdAt" | "updatedAt" | "expiresAt", ExtArgs["result"]["uploadSession"]>

export type $UploadSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UploadSession"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    filename: string
    totalChunks: number
    uploadedChunks: number
    status: $Enums.UploadStatus
    s3Key: string | null
    createdAt: Date
    updatedAt: Date
    expiresAt: Date
  }, ExtArgs["result"]["uploadSession"]>
  composites: {}
}

export type UploadSessionGetPayload<S extends boolean | null | undefined | UploadSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload, S>

export type UploadSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UploadSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UploadSessionCountAggregateInputType | true
  }

export interface UploadSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UploadSession'], meta: { name: 'UploadSession' } }
  /**
   * Find zero or one UploadSession that matches the filter.
   * @param {UploadSessionFindUniqueArgs} args - Arguments to find a UploadSession
   * @example
   * // Get one UploadSession
   * const uploadSession = await prisma.uploadSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UploadSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, UploadSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UploadSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UploadSessionFindUniqueOrThrowArgs} args - Arguments to find a UploadSession
   * @example
   * // Get one UploadSession
   * const uploadSession = await prisma.uploadSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UploadSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UploadSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UploadSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadSessionFindFirstArgs} args - Arguments to find a UploadSession
   * @example
   * // Get one UploadSession
   * const uploadSession = await prisma.uploadSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UploadSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, UploadSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UploadSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadSessionFindFirstOrThrowArgs} args - Arguments to find a UploadSession
   * @example
   * // Get one UploadSession
   * const uploadSession = await prisma.uploadSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UploadSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UploadSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UploadSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UploadSessions
   * const uploadSessions = await prisma.uploadSession.findMany()
   * 
   * // Get first 10 UploadSessions
   * const uploadSessions = await prisma.uploadSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const uploadSessionWithIdOnly = await prisma.uploadSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UploadSessionFindManyArgs>(args?: Prisma.SelectSubset<T, UploadSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UploadSession.
   * @param {UploadSessionCreateArgs} args - Arguments to create a UploadSession.
   * @example
   * // Create one UploadSession
   * const UploadSession = await prisma.uploadSession.create({
   *   data: {
   *     // ... data to create a UploadSession
   *   }
   * })
   * 
   */
  create<T extends UploadSessionCreateArgs>(args: Prisma.SelectSubset<T, UploadSessionCreateArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UploadSessions.
   * @param {UploadSessionCreateManyArgs} args - Arguments to create many UploadSessions.
   * @example
   * // Create many UploadSessions
   * const uploadSession = await prisma.uploadSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UploadSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, UploadSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UploadSessions and returns the data saved in the database.
   * @param {UploadSessionCreateManyAndReturnArgs} args - Arguments to create many UploadSessions.
   * @example
   * // Create many UploadSessions
   * const uploadSession = await prisma.uploadSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UploadSessions and only return the `id`
   * const uploadSessionWithIdOnly = await prisma.uploadSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UploadSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UploadSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UploadSession.
   * @param {UploadSessionDeleteArgs} args - Arguments to delete one UploadSession.
   * @example
   * // Delete one UploadSession
   * const UploadSession = await prisma.uploadSession.delete({
   *   where: {
   *     // ... filter to delete one UploadSession
   *   }
   * })
   * 
   */
  delete<T extends UploadSessionDeleteArgs>(args: Prisma.SelectSubset<T, UploadSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UploadSession.
   * @param {UploadSessionUpdateArgs} args - Arguments to update one UploadSession.
   * @example
   * // Update one UploadSession
   * const uploadSession = await prisma.uploadSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UploadSessionUpdateArgs>(args: Prisma.SelectSubset<T, UploadSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UploadSessions.
   * @param {UploadSessionDeleteManyArgs} args - Arguments to filter UploadSessions to delete.
   * @example
   * // Delete a few UploadSessions
   * const { count } = await prisma.uploadSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UploadSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, UploadSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UploadSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UploadSessions
   * const uploadSession = await prisma.uploadSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UploadSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, UploadSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UploadSessions and returns the data updated in the database.
   * @param {UploadSessionUpdateManyAndReturnArgs} args - Arguments to update many UploadSessions.
   * @example
   * // Update many UploadSessions
   * const uploadSession = await prisma.uploadSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UploadSessions and only return the `id`
   * const uploadSessionWithIdOnly = await prisma.uploadSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UploadSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UploadSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UploadSession.
   * @param {UploadSessionUpsertArgs} args - Arguments to update or create a UploadSession.
   * @example
   * // Update or create a UploadSession
   * const uploadSession = await prisma.uploadSession.upsert({
   *   create: {
   *     // ... data to create a UploadSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UploadSession we want to update
   *   }
   * })
   */
  upsert<T extends UploadSessionUpsertArgs>(args: Prisma.SelectSubset<T, UploadSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__UploadSessionClient<runtime.Types.Result.GetResult<Prisma.$UploadSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UploadSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadSessionCountArgs} args - Arguments to filter UploadSessions to count.
   * @example
   * // Count the number of UploadSessions
   * const count = await prisma.uploadSession.count({
   *   where: {
   *     // ... the filter for the UploadSessions we want to count
   *   }
   * })
  **/
  count<T extends UploadSessionCountArgs>(
    args?: Prisma.Subset<T, UploadSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UploadSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UploadSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UploadSessionAggregateArgs>(args: Prisma.Subset<T, UploadSessionAggregateArgs>): Prisma.PrismaPromise<GetUploadSessionAggregateType<T>>

  /**
   * Group by UploadSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UploadSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UploadSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UploadSessionGroupByArgs['orderBy'] }
      : { orderBy?: UploadSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UploadSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUploadSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UploadSession model
 */
readonly fields: UploadSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UploadSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UploadSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UploadSession model
 */
export interface UploadSessionFieldRefs {
  readonly id: Prisma.FieldRef<"UploadSession", 'String'>
  readonly filename: Prisma.FieldRef<"UploadSession", 'String'>
  readonly totalChunks: Prisma.FieldRef<"UploadSession", 'Int'>
  readonly uploadedChunks: Prisma.FieldRef<"UploadSession", 'Int'>
  readonly status: Prisma.FieldRef<"UploadSession", 'UploadStatus'>
  readonly s3Key: Prisma.FieldRef<"UploadSession", 'String'>
  readonly createdAt: Prisma.FieldRef<"UploadSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UploadSession", 'DateTime'>
  readonly expiresAt: Prisma.FieldRef<"UploadSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UploadSession findUnique
 */
export type UploadSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * Filter, which UploadSession to fetch.
   */
  where: Prisma.UploadSessionWhereUniqueInput
}

/**
 * UploadSession findUniqueOrThrow
 */
export type UploadSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * Filter, which UploadSession to fetch.
   */
  where: Prisma.UploadSessionWhereUniqueInput
}

/**
 * UploadSession findFirst
 */
export type UploadSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * Filter, which UploadSession to fetch.
   */
  where?: Prisma.UploadSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UploadSessions to fetch.
   */
  orderBy?: Prisma.UploadSessionOrderByWithRelationInput | Prisma.UploadSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UploadSessions.
   */
  cursor?: Prisma.UploadSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UploadSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UploadSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UploadSessions.
   */
  distinct?: Prisma.UploadSessionScalarFieldEnum | Prisma.UploadSessionScalarFieldEnum[]
}

/**
 * UploadSession findFirstOrThrow
 */
export type UploadSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * Filter, which UploadSession to fetch.
   */
  where?: Prisma.UploadSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UploadSessions to fetch.
   */
  orderBy?: Prisma.UploadSessionOrderByWithRelationInput | Prisma.UploadSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UploadSessions.
   */
  cursor?: Prisma.UploadSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UploadSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UploadSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UploadSessions.
   */
  distinct?: Prisma.UploadSessionScalarFieldEnum | Prisma.UploadSessionScalarFieldEnum[]
}

/**
 * UploadSession findMany
 */
export type UploadSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * Filter, which UploadSessions to fetch.
   */
  where?: Prisma.UploadSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UploadSessions to fetch.
   */
  orderBy?: Prisma.UploadSessionOrderByWithRelationInput | Prisma.UploadSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UploadSessions.
   */
  cursor?: Prisma.UploadSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UploadSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UploadSessions.
   */
  skip?: number
  distinct?: Prisma.UploadSessionScalarFieldEnum | Prisma.UploadSessionScalarFieldEnum[]
}

/**
 * UploadSession create
 */
export type UploadSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * The data needed to create a UploadSession.
   */
  data: Prisma.XOR<Prisma.UploadSessionCreateInput, Prisma.UploadSessionUncheckedCreateInput>
}

/**
 * UploadSession createMany
 */
export type UploadSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UploadSessions.
   */
  data: Prisma.UploadSessionCreateManyInput | Prisma.UploadSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UploadSession createManyAndReturn
 */
export type UploadSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * The data used to create many UploadSessions.
   */
  data: Prisma.UploadSessionCreateManyInput | Prisma.UploadSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UploadSession update
 */
export type UploadSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * The data needed to update a UploadSession.
   */
  data: Prisma.XOR<Prisma.UploadSessionUpdateInput, Prisma.UploadSessionUncheckedUpdateInput>
  /**
   * Choose, which UploadSession to update.
   */
  where: Prisma.UploadSessionWhereUniqueInput
}

/**
 * UploadSession updateMany
 */
export type UploadSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UploadSessions.
   */
  data: Prisma.XOR<Prisma.UploadSessionUpdateManyMutationInput, Prisma.UploadSessionUncheckedUpdateManyInput>
  /**
   * Filter which UploadSessions to update
   */
  where?: Prisma.UploadSessionWhereInput
  /**
   * Limit how many UploadSessions to update.
   */
  limit?: number
}

/**
 * UploadSession updateManyAndReturn
 */
export type UploadSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * The data used to update UploadSessions.
   */
  data: Prisma.XOR<Prisma.UploadSessionUpdateManyMutationInput, Prisma.UploadSessionUncheckedUpdateManyInput>
  /**
   * Filter which UploadSessions to update
   */
  where?: Prisma.UploadSessionWhereInput
  /**
   * Limit how many UploadSessions to update.
   */
  limit?: number
}

/**
 * UploadSession upsert
 */
export type UploadSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * The filter to search for the UploadSession to update in case it exists.
   */
  where: Prisma.UploadSessionWhereUniqueInput
  /**
   * In case the UploadSession found by the `where` argument doesn't exist, create a new UploadSession with this data.
   */
  create: Prisma.XOR<Prisma.UploadSessionCreateInput, Prisma.UploadSessionUncheckedCreateInput>
  /**
   * In case the UploadSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UploadSessionUpdateInput, Prisma.UploadSessionUncheckedUpdateInput>
}

/**
 * UploadSession delete
 */
export type UploadSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
  /**
   * Filter which UploadSession to delete.
   */
  where: Prisma.UploadSessionWhereUniqueInput
}

/**
 * UploadSession deleteMany
 */
export type UploadSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UploadSessions to delete
   */
  where?: Prisma.UploadSessionWhereInput
  /**
   * Limit how many UploadSessions to delete.
   */
  limit?: number
}

/**
 * UploadSession without action
 */
export type UploadSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UploadSession
   */
  select?: Prisma.UploadSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UploadSession
   */
  omit?: Prisma.UploadSessionOmit<ExtArgs> | null
}
